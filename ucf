#!/usr/bin/env python3

import argparse
import os
from typing import Any

from unicorefuzz import configspec
from unicorefuzz.configspec import serialize_spec, UNICOREFUZZ_SPEC
from unicorefuzz.harness import Harness
from unicorefuzz.probe_wrapper import ProbeWrapper
from unicorefuzz.unicorefuzz import Unicorefuzz


def load_conf(args: argparse.Namespace, silent: bool = False) -> Any:
    """
    Loads the config from args
    :param args: the arguments
    :param silent: If progress and config infos should be printed or not (if silent is True)
    :return: a loaded config
    """
    return configspec.load_config(args.config, silent)


# Note: The docstring will be used as commandline help for these funcs
def print_spec(args: argparse.Namespace) -> None:
    """
    Outputs expected config.py spec.
    """
    print(serialize_spec(UNICOREFUZZ_SPEC))


def wrap_probe(args: argparse.Namespace) -> None:
    """
    Attach, break and forward memory from target
    Former probewrapper.py
    """
    ProbeWrapper(load_conf(args)).wrap_gdb_target()


def emulate(args: argparse.Namespace) -> None:
    """
    Drop the memory in the harness and start the emulation
    Former harness.py
    """
    Harness(load_conf(args)).harness(args.input_file, debug=args.debug, trace=args.trace, wait=args.wait)


def wait_for_wrapper(args: argparse.Namespace, ucf: Unicorefuzz=None) -> None:
    """
    Blocks until data from probe wrapper becomes available
    """
    if ucf is not None:
        config = ucf.config
    else:
        config = load_conf(args)
    print("[*] Awaiting wrapper...")
    Unicorefuzz(config).wait_for_probe_wrapper()


def print_afl_path(args: argparse.Namespace) -> None:
    """
    print(Unicorefuzz(load_conf(args)).afl_path)
    """
    print(Unicorefuzz(load_conf(args, silent=True)).afl_path)


def fuzz(args: argparse.Namespace) -> None:
    """
    Starts afl using ucf emu
    """
    id = args.id
    restart = args.restart
    if restart and id != "0":
        raise ValueError("Only master (`id 0`) may `reset` the state.")
    if id == "0":
        id = "master"
        mode = "-M master"
    else:
        id = "fuzzer{}".format(id)
        mode = "-S fuzzer{}".format(id)
    ucf = Unicorefuzz(load_conf(args))

    if restart:
        try:
            os.unlink(ucf.config.AFL_OUTPUTS)
        except:
            pass

    afl_inputs = ucf.config.AFL_INPUTS
    # See if output is already created, if not, we want to rerun afl instead of restart.
    if os.path.isdir(os.path.abspath(os.path.join(ucf.config.AFL_OUTPUTS, id))):
        print("[*] AFL path for node {} already exists. Resuming fuzzing.".format(id))
        afl_inputs = "-"

    wait_for_wrapper(args, ucf) 

    afl = os.path.join(ucf.afl_path, "afl-fuzz")
    ucf_main = os.path.join(ucf.config.UNICORE_PATH, "ucf")

    # AFL_COMPCONV_LEVEL=2 is an awesome addition to afl-unicorn, and definitely the one you want :)
    # See afl++ repo
    env = "PATH={}:$PATH AFL_COMPCOV_LEVEL=2".format(ucf.afl_path)
    if args.print_outputs:
        env = "{} AFL_DEBUG_CHILD_OUTPUT=1 ".format(env)
    run = "{env} {afl} -U -m none -i {afl_in} -o {afl_out} -t 4000+ {mode} -- python3 {ucf_main} emu @@ || exit 1".format(
        env=env, afl=afl, afl_in=afl_inputs, afl_out=ucf.config.AFL_OUTPUTS, mode=mode, id=id, ucf_main=ucf_main
    )
    if args.print_outputs:
        print("[*] Starting: ", run)
    os.system(run)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Unicorefuzz, emulate kernels with AFL++-Unicorn"
    )
    subparsers = parser.add_subparsers(help="What unicorefuzz function to use.")

    probe_wrapper = subparsers.add_parser("attach", help=wrap_probe.__doc__)
    probe_wrapper.set_defaults(function=wrap_probe)

    probe_wrapper.add_argument(
        "-c", "--config", type=str, default="config.py", help="The config file to use."
    )

    harness = subparsers.add_parser("emu", aliases={"emulate"}, help=emulate.__doc__)
    harness.set_defaults(function=emulate)

    harness.add_argument(
        "input_file",
        type=str,
        help="Path to the file containing the mutated input to load",
    )
    harness.add_argument(
        "-c", "--config", type=str, default="config.py", help="The config file to use."
    )
    harness.add_argument(
        "-d",
        "--debug",
        default=False,
        action="store_true",
        help="Starts the testcase in uUdbg (if installed)",
    )
    harness.add_argument(
        "-t",
        "--trace",
        default=False,
        action="store_true",
        help="Enables debug tracing",
    )
    harness.add_argument(
        "-w",
        "--wait",
        default=True,
        action="store_true",
        help="Wait for the state directory to be present",
    )

    sub_fuzz = subparsers.add_parser("fuzz", help=fuzz.__doc__)
    sub_fuzz.set_defaults(function=fuzz)
    sub_fuzz.add_argument(
        "-c", "--config", type=str, default="config.py", help="The config file to use."
    )
    sub_fuzz.add_argument(
        "-i", "--id", type=str, default="0", help="The AFL multi fuzzer id to use (0 for master)."
    )
    sub_fuzz.add_argument(
        "-r", "--restart", default=False, action="store_false",
        help="If set, clears the afl_output directory before running.\nOnly works for master.\nDANGEROUS!!"
    )
    sub_fuzz.add_argument(
        "-P", "--print-outputs", default=False, action="store_true", help="When fuzing, print all child output (for debug)",
    )

    sub_await = subparsers.add_parser("await", help=wait_for_wrapper.__doc__)
    sub_await.set_defaults(function=wait_for_wrapper)
    sub_await.add_argument(
        "-c", "--config", type=str, default="config.py", help="The config file to use."
    )

    sub_afl_path = subparsers.add_parser("afl-path", help=print_afl_path.__doc__)
    sub_afl_path.set_defaults(function=print_afl_path)
    sub_afl_path.add_argument(
        "-c", "--config", type=str, default="config.py", help="The config file to use."
    )

    sub_spec = subparsers.add_parser("spec", help=print_spec.__doc__)
    sub_spec.set_defaults(function=print_spec)
    sub_spec.add_argument(
        "-c", "--config", type=str, default="config.py", help="The config file to use."
    )

    args = parser.parse_args()

    if hasattr(args, "function"):
        args.function(args)
    else:
        parser.print_help()
